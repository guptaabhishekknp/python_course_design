"""
This file creates and writes the dataset for pagerank problem. The graph has 1000 vertices.
 
Then 2*1000 edges are added uniformly: 2000 edges drawn from the uniform distribution on the ordered list of pairs.
REMARK: The above step is the only difference between the two versions of this code.

Then more edges are added until there are 10*1000 edges. This is done by picking one vertex uniformly randomly;
and then picking another with probability proportional to the degree of each vertex.

The adjacency matrix is converted to a networkx graph, which is then checked for connectedness. 
It returns true if connected. The graph generated by this code before making nodes dangly is connected most of the time.

A percentage of nodes are made dangly by hand. 
This ends up making a slightly larger percentage of nodes dangly as these nodes only have the hand-removed nodes as neighbors.

"""

import numpy as np
import networkx as nx

num_vert = 1000 #number of vertices in the graph
pairs = [(i,j) for i in range(num_vert) for j in range(i)]#list of *all* possible pairs of these vertices as tuples
initial_edges = np.random.choice(len(pairs), 2*num_vert, replace=False) #for initial 2000 edges between pairs chosen uniformly randomly
adj_matrix = np.zeros((num_vert,num_vert), dtype=int) #adjacency matrix
degree = np.zeros(num_vert, dtype=int) #list of degrees of each vertex

for edge in initial_edges: #populating adj matrix with the first 2000 edges and updating a valency counter
    u, v = pairs[edge][0], pairs[edge][1]
    if (u == v or adj_matrix[u][v] == 1): #no self-links allowed; skip iteration if there's already an edge between u & v
        continue
    adj_matrix[u][v] = 1
    degree[u] += 1
    degree[v] += 1

while np.sum(degree)/2 < 10*num_vert: #loop until there's a total of 10*num_vert edges
    v = np.random.randint(num_vert)
    u = np.random.choice(np.arange(0, num_vert), p=degree/sum(degree)) #pick a random vertex with probability proportional to the degree of the vertex
    if (u == v or adj_matrix[u][v] == 1): #remove this if links to self are allowed
        continue #remove this if links to self are allowed
    adj_matrix[u][v] = 1
    degree[u] = degree[u]+1
    degree[v] = degree[v]+1
         
G=nx.from_numpy_matrix(adj_matrix) #convert the numpy adjacency matrix to a networkx graph
print(nx.is_connected(G))          #check if the graph is connected

dangly_fraction = 0.02 #fraction of the vertices which will be dangly 
dangly_vert = np.random.choice(num_vert,int(dangly_fraction*num_vert)) #list of randomly selected dangly vertices

for v in dangly_vert:
    adj_matrix[v] = np.zeros(num_vert, dtype=int)
    for i in range(num_vert):
        adj_matrix[i][v] = 0

file = open("data.txt", "w+") #"w" indicates write, plus sign will create a file if it does not exist
for i in range(num_vert):
    file.write(str(i)+":"+','.join(str(j) for j in range(num_vert) if adj_matrix[i][j]!=0)+'\n')
file.close()